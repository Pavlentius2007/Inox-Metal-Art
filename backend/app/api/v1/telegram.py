from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
import httpx
import os
from typing import Optional, List
import json
from datetime import datetime

router = APIRouter()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
try:
    from telegram_config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
except ImportError:
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
    TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "YOUR_CHAT_ID_HERE")

class TelegramMessage(BaseModel):
    company_name: str
    contact_person: str
    email: str
    phone: str
    country: str
    city: str
    product_type: str
    quantity: str
    application: str
    deadline: Optional[str] = None
    additional_info: Optional[str] = None
    file_paths: Optional[str] = None

async def send_telegram_message(message_text: str, files: Optional[List[str]] = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        text_data = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message_text,
            "parse_mode": "HTML"
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(text_url, json=text_data)
            response.raise_for_status()
            
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        if files:
            for file_path in files:
                if os.path.exists(file_path):
                    file_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendDocument"
                    with open(file_path, 'rb') as file:
                        files_data = {'document': file}
                        data = {'chat_id': TELEGRAM_CHAT_ID}
                        async with httpx.AsyncClient() as client:
                            response = await client.post(file_url, data=data, files=files_data)
                            response.raise_for_status()
                            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")

@router.post("/send-application")
async def send_application_to_telegram(message: TelegramMessage):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –≤ Telegram"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"""
<b>üéØ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê</b>

<b>üè¢ –ö–æ–º–ø–∞–Ω–∏—è:</b> {message.company_name}
<b>üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:</b> {message.contact_person}
<b>üìß Email:</b> {message.email}
<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {message.phone}
<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> {message.country}
<b>üèôÔ∏è –ì–æ—Ä–æ–¥:</b> {message.city}

<b>üì¶ –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ü–∏–∏:</b> {message.product_type}
<b>üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {message.quantity}
<b>üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</b> {message.application}
"""

        if message.deadline:
            message_text += f"<b>‚è∞ –ñ–µ–ª–∞–µ–º—ã–µ —Å—Ä–æ–∫–∏:</b> {message.deadline}\n"
            
        if message.additional_info:
            message_text += f"\n<b>üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n{message.additional_info}\n"

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        files = []
        if message.file_paths:
            try:
                file_paths = json.loads(message.file_paths)
                if isinstance(file_paths, list):
                    files = file_paths
            except:
                pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_telegram_message(message_text, files)
        
        return {"success": True, "message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram"}
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏")

@router.get("/test")
async def test_telegram():
    """–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        test_message = """
<b>üß™ –¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>

–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!
–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """
        
        await send_telegram_message(test_message)
        return {"success": True, "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
