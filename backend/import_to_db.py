#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–º–ø–æ—Ä—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from app.core.database import SessionLocal, engine
    from app.models.material import Material
    from app.core.database import Base
    print("Database imports OK")
except ImportError as e:
    print(f"Import error: {e}")
    sys.exit(1)

def get_file_size_mb(file_path):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ú–ë"""
    try:
        size_bytes = os.path.getsize(file_path)
        size_mb = size_bytes / (1024 * 1024)
        return f"{size_mb:.1f} MB"
    except:
        return "0 MB"

def get_file_type(file_path):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
    ext = Path(file_path).suffix.lower()
    if ext == '.pdf':
        return 'PDF'
    elif ext in ['.jpg', '.jpeg', '.png', '.gif']:
        return 'Image'
    elif ext in ['.doc', '.docx']:
        return 'Word'
    elif ext in ['.xls', '.xlsx']:
        return 'Excel'
    else:
        return 'Document'

def determine_category(file_name):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    file_name_lower = file_name.lower()
    
    # –ö–∞—Ç–∞–ª–æ–≥–∏
    if any(word in file_name_lower for word in ['–∫–∞—Ç–∞–ª–æ–≥', 'catalog', 'catalogue', 'decorative']):
        return 'catalogs'
    
    # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    if any(word in file_name_lower for word in ['iso', 'leed', 'rohs', 'certificate']):
        return 'certificates'
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    if any(word in file_name_lower for word in ['spec', 'technical', 'material safety']):
        return 'specifications'
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
    if any(word in file_name_lower for word in ['interior', 'exterior', 'elevator', 'handrail']):
        return 'applications'
    
    # –î–∏–∑–∞–π–Ω
    if any(word in file_name_lower for word in ['design', 'art', 'pattern', 'texture']):
        return 'designs'
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return 'other'

def generate_tags(file_name, category):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    tags = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–∫ —Ç–µ–≥
    tags.append(category)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    file_name_lower = file_name.lower()
    
    if 'pdf' in file_name_lower:
        tags.append('PDF')
    if 'iso' in file_name_lower:
        tags.append('ISO')
    if 'pvd' in file_name_lower:
        tags.append('PVD')
    if 'stainless' in file_name_lower:
        tags.append('–Ω–µ—Ä–∂–∞–≤–µ—é—â–∞—è —Å—Ç–∞–ª—å')
    if 'elevator' in file_name_lower:
        tags.append('–ª–∏—Ñ—Ç')
    if 'interior' in file_name_lower:
        tags.append('–∏–Ω—Ç–µ—Ä—å–µ—Ä')
    if 'exterior' in file_name_lower:
        tags.append('—ç–∫—Å—Ç–µ—Ä—å–µ—Ä')
    if 'rohs' in file_name_lower:
        tags.append('RoHS')
    if 'leed' in file_name_lower:
        tags.append('LEED')
    
    return tags

def generate_description(file_name):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    file_name_lower = file_name.lower()
    
    if "–∫–∞—Ç–∞–ª–æ–≥" in file_name_lower or "–¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è" in file_name_lower:
        return "–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –Ω–µ—Ä–∂–∞–≤–µ—é—â–µ–π —Å—Ç–∞–ª–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –æ—Ç–¥–µ–ª–æ–∫ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"
    elif "iso" in file_name_lower:
        return "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∫–∞—á–µ—Å—Ç–≤–∞ ISO, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"
    elif "rohs" in file_name_lower:
        return "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ RoHS, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
    elif "leed" in file_name_lower:
        return "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∑–µ–ª–µ–Ω–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ LEED –¥–ª—è —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"
    elif "salt spray" in file_name_lower:
        return "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å–ø—ã—Ç–∞–Ω–∏–π –Ω–∞ –∫–æ—Ä—Ä–æ–∑–∏–æ–Ω–Ω—É—é —Å—Ç–æ–π–∫–æ—Å—Ç—å (—Å–æ–ª–µ–≤–æ–π —Ç—É–º–∞–Ω)"
    elif "anti" in file_name_lower and "microbial" in file_name_lower:
        return "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—ã—Ç–∞–Ω–∏–π –∞–Ω—Ç–∏–º–∏–∫—Ä–æ–±–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –ø–æ–∫—Ä—ã—Ç–∏–π"
    elif "elevator" in file_name_lower:
        return "–ö–∞—Ç–∞–ª–æ–≥ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ª–∏—Ñ—Ç–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–±–∏–Ω"
    elif "interior" in file_name_lower:
        return "–ö–∞—Ç–∞–ª–æ–≥ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∏–Ω—Ç–µ—Ä—å–µ—Ä–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –Ω–µ—Ä–∂–∞–≤–µ–π–∫–∏"
    elif "exterior" in file_name_lower:
        return "–ö–∞—Ç–∞–ª–æ–≥ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –Ω–∞—Ä—É–∂–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏ —Ñ–∞—Å–∞–¥–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"
    elif "handrail" in file_name_lower:
        return "–ö–∞—Ç–∞–ª–æ–≥ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä—É—á–Ω–µ–π –¥–ª—è –ª–∏—Ñ—Ç–æ–≤ –∏ –ª–µ—Å—Ç–Ω–∏—Ü"
    else:
        return f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {file_name}"

def scan_and_import():
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É materials –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤ –±–∞–∑—É"""
    materials_dir = Path("uploads/materials")
    
    if not materials_dir.exists():
        print(f"–ü–∞–ø–∫–∞ {materials_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    Base.metadata.create_all(bind=engine)
    
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –±–∞–∑–µ
        existing_count = db.query(Material).count()
        if existing_count > 0:
            print(f"–í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {existing_count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –û—á–∏—â–∞–µ–º...")
            db.query(Material).delete()
            db.commit()
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        materials = []
        for file_path in materials_dir.glob("*"):
            if file_path.is_file():
                file_name = file_path.name
                relative_path = f"materials/{file_name}"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ç–∏–ø —Ñ–∞–π–ª–∞
                category = determine_category(file_name)
                file_type = get_file_type(relative_path)
                file_size = get_file_size_mb(file_path)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç–µ–≥–∏
                description = generate_description(file_name)
                tags = generate_tags(file_name, category)
                
                material_data = {
                    "name": file_name,
                    "description": description,
                    "category": category,
                    "file_type": file_type,
                    "file_size": file_size,
                    "file_path": relative_path,
                    "download_url": relative_path,
                    "tags": tags,
                    "is_active": True,
                    "sort_order": len(materials) + 1,
                    "is_featured": "–∫–∞—Ç–∞–ª–æ–≥" in file_name.lower() or "–¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è" in file_name.lower()
                }
                
                materials.append(material_data)
                print(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {file_name} -> {category}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
        for material_data in materials:
            material = Material(
                name=material_data["name"],
                description=material_data["description"],
                category=material_data["category"],
                file_type=material_data["file_type"],
                file_size=material_data["file_size"],
                file_path=material_data["file_path"],
                download_url=material_data["download_url"],
                tags=material_data["tags"],
                is_active=material_data["is_active"],
                sort_order=material_data["sort_order"],
                is_featured=material_data["is_featured"],
                upload_date=datetime.now(),
                downloads=0
            )
            db.add(material)
        
        db.commit()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")
        db.rollback()
        import traceback
        traceback.print_exc()
    finally:
        db.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –°–∫–∞–Ω–∏—Ä—É—é –ø–∞–ø–∫—É materials –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é –≤ –±–∞–∑—É...")
    scan_and_import()
    print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()



